#include    "abstract-signal.h"

//------------------------------------------------------------------------------
//
//------------------------------------------------------------------------------
Signal::Signal(QObject *parent) : Device(parent)
  , prev_signal_closed(false)
{
    std::fill(lens_state.begin(), lens_state.end(), false);
}

//------------------------------------------------------------------------------
//
//------------------------------------------------------------------------------
Signal::~Signal()
{

}

//------------------------------------------------------------------------------
//
//------------------------------------------------------------------------------
void Signal::close(bool is_closed)
{
    Q_UNUSED(is_closed)
}

//------------------------------------------------------------------------------
//
//------------------------------------------------------------------------------
void Signal::slotRecvPreviosState(bool closed_state)
{
    prev_signal_closed = closed_state;
}

//------------------------------------------------------------------------------
//
//------------------------------------------------------------------------------
void Signal::preStep(state_vector_t &Y, double t)
{
    Q_UNUSED(Y)
    Q_UNUSED(t)
}

//------------------------------------------------------------------------------
//
//------------------------------------------------------------------------------
void Signal::ode_system(const state_vector_t &Y, state_vector_t &dYdt, double t)
{
    Q_UNUSED(Y)
    Q_UNUSED(dYdt)
    Q_UNUSED(t)
}

//------------------------------------------------------------------------------
//
//------------------------------------------------------------------------------
void Signal::load_config(CfgReader &cfg)
{
    Q_UNUSED(cfg)
}

//------------------------------------------------------------------------------
//
//------------------------------------------------------------------------------
void Signal::slotChangeState()
{

}
